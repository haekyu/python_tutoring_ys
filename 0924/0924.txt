- 저번 시간
	+ 기본적인 것들
		- 데이터 타입: int /.....
		- 연산: > = <= == * + ....
		- 형 변환
			: int(3.234234) == 3
			: float(3) == 3.0
			: str(1234) == '1234'
			: bool(3) == True 
				: 0 --> false
				: 나머지 --> true
		- list
		- 변수
			: = 
			: a = b --> a에다가 b를 대입(assign)한다.
			: s = s + e
				: lvalue 에다가 rvalue를 대입한다.

- 오늘 뭘 할 것인지
	+ string format
		- string 사용/만들기 규칙?
		- "%d" % 3
		- %d == int
		- %s == string
		- %lf == float
			- %.2lf 라고 쓰면 소숫점 둘째자리까지만 출력
		- %????? == boolean
		- string 만들기 규칙
			- "" 안에다가 내가 원하는 pattern의 string을 넣어주면 됨.
			- '<int> <문자> <int> <float>' == pattern
				'%d %s %d %lf' % (3, 'abc', 5, 5.3)
	+ series 자료형
		- 순서가 있는 자료형
		- list
			+ []
			+ [1, 2, 3, 4]
			+ ['ab', 'cd']
			+ [1, 2, [[[[[]]]]], [2, 3, 'ba'], 'bc', 3, 'an']
			+ index == 위치 == element가 몇 번째에 존재하는지?
				ll = ['a', 'b', 'c', 'd']
				idx == 0 --> 0 번째 위치 --> ll[idx] == 'a'
				1 번째 위치에 '234' 을 대입해라.
				ll[1] = '234'
				ll = ['a', '234', 'c', 'd']
			+ slicing
				: 어떤 index의 범위로 접근 (ll[from:to])
				: ll = ['a', 'b', 'c', 'd']
				: ll[0: 2 + 1]
					--> idx 가 0 이상 2+1 미만의 범위를 잡아와라
					--> ['a', 'b', 'c'] 
				: ll[-2:-1]
			+ 유용한 함수
				: append
					- ll = ['a', 'b', 'c', 'd']
					- ll.append(내가 뒤에 넣고싶은 원소)
					- ll.append(6)
					- 데이터 모아서 리스트 만들 때 자주 쓰임
				: len(lst)
				: * +
				: del
					- del ll[0]
			+ membership !!!!!!!!!!!!!!!!!!!!!!
				: ?????? ???? ????? ????
				: 포함되어있는지 물어봄
				: in
				: ll = ['a', '234', 'c', 'd']
				: 234 in ll
				: 예전에....
					for i in range(3):
					for i in ['a', '234', 'c', 'd']:
			+ cf) string
				: 'an' in 'can' == true
				: 'an' in 'na' == false?
				: indexing / slicing
		- tuple
			+ ()
			+ 변경 불가
			+ pair --> (1, 3) 원소가 두 개
			+ 원소가 n개 (1개, 2개, 3개 ..) 
			+ (1, 2, 3, 4)
			+ 함수????? argument줄 때
			+ '%d * %d = %d' % (i, j, i*j)
		- array
			+ 수학적으로 행렬
				+ 행렬을 list로 나타내고싶다?
				+ [[1,2], [3,4], [5,6]]
				  ==> [1 2
				  	   3 4
				  	   5 6]
			+ n 차원의 값을 나타내고 싶을 때 == (n차원 벡터)
			+ numpy
				* 숫자와 관련된 각종 함수들의 집합
				* 필요할 때마다 구글 검색!
				* 예를들어서 array 만들 때 쓰여요.
				* arr = numpy.array(<lst>)
				* arr.T (Transpose)
				* numpy.dot(mat1, mat2)
				* numpy.dot(mat1, vec1) --> XXXXXXXX
				* numpy.matmul(mat1, vec1)
				* numpy.matmul(mat1, mat2)
				* numpy.average(arr)
				* numpy.std(arr)
			+ row / col 으로 접근
				* arr[3, 2] --> 3 번째 row, 2 번째 col
				* arr[3, :] --> 3 번째 row
				* arr[:, 2] --> 2 번째 col
				* cf) 행렬을 제가 list 로 만들었어요. 물론 불완전 하지만..
				  lst_mat = [[1, 2], [3, 4]]
				  lst_mat[1][1] == 4
				  --> lst_mat[1] == [3, 4]
				  -----> [3, 4][1] == 4
				  lst[:]
	

- 다음시간에 뭘 할 것인지
	+ 리스트 / arr
	+ 함수
	+ dictionary
		: {}
	+ dictionary 사용 예제














