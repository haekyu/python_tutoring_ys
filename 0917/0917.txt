1. 파이썬 환경
	- interpreter
	- anaconda
		* scientific package
			- 남들이 만들어 놓은 좋은 함수들의 묶음
			- numpy, scipy
	- spyder
		* IDE
2. 사용방법
	
3. 기본적인 개념
	- 데이터 타입
		* 프로그램
			+ 데이터 + 운용 --> 원하는 결과
			+ primitive 타입
				- int : 정수 (-1, 0, 1, 2, ...)
				- float : 실수 (0.3234234, -342.02398432)
				- string : 문자 ('a', 'asdfasdf', '한글', '234234')
				- bool : true / false
			+ series 타입
				- list
			+ 타입을 직접 디자인
				- class
	- 변수
	- 연산
		+ 기본 연산
			- 숫자 (int, float) 연산 
				- (+, -, *, /, **)
				- % (modular 연산)
					- 나머지
					- 5 % 3 == 2
					- x가 짝수일때?  
						if (x % 2 == 0):
							미ㅏㅇ노ㅓ리ㅓ만오러
			- string 연산
				- + (붙이기, concatenation)
				- * (곱하기, multiplication)
				- indexing (원하는 위치의 문자를 콕 찝어내기)
				- len(): string 길이
				- split(separator):
					>>> s = 'Hi I am a boy'
					>>> s.split(' ')
					
					string 리스트로 관리
					cf) .csv / .tsv
					1,2,3,4
					5,3,2,3
					1,1,1,1
					--> [[1, 2, 3, 4], [5, 3, 2, 3], [1, 1, 1, 1]]

			- boolean 연산
				- not
					* not(True) == False
					* not(False) == True
				- and
					- and == 집합에서 교집합
					* True and True == True
					* True and False == False
					* False and True == False
					* False and False == False
				- or
					- or == 집합에서 합집합
					* True or True == True
					* True or False == True
					* False or True == True
					* False or False == False
	- 조건문
		- 문법
			:하고 엔터
			탭 (indent 중요!)
		- if <조건1>:
			do1
		- if + elif
			elif == else if
		if <조건1>:
			do1
		elif <조건2>:
			do2
		- if + elif + else
		if <조건1>:
			do1
		elif <조건2>:
			do2
		elif <조건3>:
			do3
		else:
			do3

		if <조건1>:
			do1
		else:
			do3
		- 중복 조건 가능
		if (i 가 짝수):
			if i > 10:
				sdfsdf
			else:
				sewer
	- loop
		* while
			- while <조건>:
				do
			(조건이 맞으면 do를 계속 해)
		* for
			- for <변수> in <변수가 하나씩 밟아갈 series>:
				sdfsdfsdf
			- <변수가 하나씩 밟아갈 series>를 range라는 함수로 잘 만듦
				range(n) -> 0부터 n-1까지
				range(5, 11) -> 5부터 11-1까지
				range(5, 11, 3) -> 5부터 11-1 안의 범위에서 3 씩 커지면서 밟는 원소들을 보여줌
		* break
			- 중도 중단

		* continue
			- pass
	- 코드

4. 리스트
	- series 자료형
	- 순서가 있음
	- [1, 2, 3, 4]
	- [1, 2, 3, 'ㄴㅇ', 4]
	- [1, 2, 3, 'ㄴㅇ', 4, [], [3, 2, 3], [[[[[[[]]]]]]]]
	- 연산
		* empty list 만들기
			: list()
			: []
		* 리스트의 더하기
			: concatenation
			: 리스트 두 개 붙이기
		* 리스트의 곱하기
			: str의 곱하기마냥
			: 사실은 str이 원래 리스트였음
		* indexing
			: index == 위치
				-1도 가능!
			: indexing == 원하는 위치의 값을 콕 찝기
				lst[index]
		* slicing
			: from indx ~ to indx

5. array
	- numpy


6. 기타
	- 비교 연산
		- == ? equal?
			- = ? assign (값을 대입한다)
		- > (초과?)
			ex) 7 > 3 ?
		- >=
		- <
		- <=
	- 주석
		* #
		* ''' ㄴㅇㄹㄴㄹㄴㅇㄹ '''
	- int i = 10;
	- i = 'sfdsdf'


7. 다음시간
	- array (행렬)
	- 튜플
	- 함수
	- sorting
	- dictionary
